{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Campbell's Home Welcome to my page! Source","title":"Home"},{"location":"#campbells-home","text":"Welcome to my page! Source","title":"Campbell's Home"},{"location":"hackerrank/","text":"HackerRank Content Interview Preparation Kit Name Category Difficulty Sales by Match Warm-up Challenges Easy Counting Valleys Warm-up Challenges Easy Jumping on the Clouds Warm-up Challenges Easy Repeated String Warm-up Challenges Easy 2D Array - DS Arrays Easy Arrays: Left Rotation Arrays Easy Hash Tables: Ransom Note Dictionaries and Hashmaps Easy Two Strings Dictionaries and Hashmaps Easy","title":"HackerRank"},{"location":"hackerrank/#hackerrank-content","text":"","title":"HackerRank Content"},{"location":"hackerrank/#interview-preparation-kit","text":"Name Category Difficulty Sales by Match Warm-up Challenges Easy Counting Valleys Warm-up Challenges Easy Jumping on the Clouds Warm-up Challenges Easy Repeated String Warm-up Challenges Easy 2D Array - DS Arrays Easy Arrays: Left Rotation Arrays Easy Hash Tables: Ransom Note Dictionaries and Hashmaps Easy Two Strings Dictionaries and Hashmaps Easy","title":"Interview Preparation Kit"},{"location":"interviewprep/arrays/ds/","text":"2D Array - DS Problem Category: Arrays Difficulty: Easy Given a 6x6 array, find the maximum \"hourglass sum.\" Input: a 2D array, \\(arr[i][j]\\) for \\(1 \\leq i, j \\leq 6\\) . \\(-9 \\leq arr[i][j] \\leq 9 \\; \\forall \\; i, j\\) Output: the maximum hourglass sum of the array. For any 3x3 block of \\(arr\\) , the hourglass sum is the sum of the top 3, bottom 3, and center entries: [[a, b, c], [d, e, f], [g, h, i]] \\(\\; \\to \\; a + b + c + e + g + h + i\\) Every hourglass sum is at least -63 and at most 63. There are only 16 possible 3x3 blocks in \\(arr\\) , so there are only 16 hourglass sums to check. You can loop through the center entries of each block ( \\(arr[1][1] \\ldots arr[4][4]\\) ) and calculate an hourglass sum for each. Java 8: public static int hourglassSum(List<List<Integer>> arr) { final int SIZE = 6; Integer[][] mat = new Integer[SIZE][SIZE]; int i = 0; for (List<Integer> row : arr) { mat[i] = row.toArray(mat[i]); i++; } final int END = SIZE - 1; final int MIN_VAL = -9; int max = MIN_VAL * 7; for (i = 1; i < END; i++) { for (int j = 1; j < END; j++) { int sum = mat[i - 1][j - 1] + mat[i - 1][j] + mat[i - 1][j + 1]; sum += mat[i][j]; sum += mat[i + 1][j - 1] + mat[i + 1][j] + mat[i + 1][j + 1]; max = Math.max(max, sum); } } return max; } C++: int hourglassSum(vector<vector<int>> arr) { const int minVal = -9; int maxSum = minVal * 7; const int end = arr.size() - 1; for (int i = 1; i < end; i++) { for (int j = 1; j < end; j++) { int sum = arr[i - 1][j - 1] + arr[i - 1][j] + arr[i - 1][j + 1]; sum += arr[i][j]; sum += arr[i + 1][j - 1] + arr[i + 1][j] + arr[i + 1][j + 1]; maxSum = max(maxSum, sum); } } return maxSum; } Python 3: def hourglassSum(arr): min_val = -9 max_sum = min_val * 7 end = len(arr) - 1 for i in range(1, end): for j in range(1, end): hourglass_sum = sum(arr[i - 1][(j - 1):(j + 2)]) hourglass_sum += arr[i][j] hourglass_sum += sum(arr[i + 1][(j - 1):(j + 2)]) max_sum = max(max_sum, hourglass_sum) return max_sum Back","title":"2D Array - DS"},{"location":"interviewprep/arrays/ds/#2d-array-ds","text":"Problem Category: Arrays Difficulty: Easy Given a 6x6 array, find the maximum \"hourglass sum.\" Input: a 2D array, \\(arr[i][j]\\) for \\(1 \\leq i, j \\leq 6\\) . \\(-9 \\leq arr[i][j] \\leq 9 \\; \\forall \\; i, j\\) Output: the maximum hourglass sum of the array. For any 3x3 block of \\(arr\\) , the hourglass sum is the sum of the top 3, bottom 3, and center entries: [[a, b, c], [d, e, f], [g, h, i]] \\(\\; \\to \\; a + b + c + e + g + h + i\\) Every hourglass sum is at least -63 and at most 63. There are only 16 possible 3x3 blocks in \\(arr\\) , so there are only 16 hourglass sums to check. You can loop through the center entries of each block ( \\(arr[1][1] \\ldots arr[4][4]\\) ) and calculate an hourglass sum for each. Java 8: public static int hourglassSum(List<List<Integer>> arr) { final int SIZE = 6; Integer[][] mat = new Integer[SIZE][SIZE]; int i = 0; for (List<Integer> row : arr) { mat[i] = row.toArray(mat[i]); i++; } final int END = SIZE - 1; final int MIN_VAL = -9; int max = MIN_VAL * 7; for (i = 1; i < END; i++) { for (int j = 1; j < END; j++) { int sum = mat[i - 1][j - 1] + mat[i - 1][j] + mat[i - 1][j + 1]; sum += mat[i][j]; sum += mat[i + 1][j - 1] + mat[i + 1][j] + mat[i + 1][j + 1]; max = Math.max(max, sum); } } return max; } C++: int hourglassSum(vector<vector<int>> arr) { const int minVal = -9; int maxSum = minVal * 7; const int end = arr.size() - 1; for (int i = 1; i < end; i++) { for (int j = 1; j < end; j++) { int sum = arr[i - 1][j - 1] + arr[i - 1][j] + arr[i - 1][j + 1]; sum += arr[i][j]; sum += arr[i + 1][j - 1] + arr[i + 1][j] + arr[i + 1][j + 1]; maxSum = max(maxSum, sum); } } return maxSum; } Python 3: def hourglassSum(arr): min_val = -9 max_sum = min_val * 7 end = len(arr) - 1 for i in range(1, end): for j in range(1, end): hourglass_sum = sum(arr[i - 1][(j - 1):(j + 2)]) hourglass_sum += arr[i][j] hourglass_sum += sum(arr[i + 1][(j - 1):(j + 2)]) max_sum = max(max_sum, hourglass_sum) return max_sum Back","title":"2D Array - DS"},{"location":"interviewprep/arrays/leftrotation/","text":"Arrays: Left Rotation Problem Category: Arrays Difficulty: Easy Given an array, rotate it to the left by \\(d\\) elements. Input: an array \\(a[n]\\) and a number of rotations to make, \\(d\\) . \\(1 \\leq d \\leq n \\leq 10^5\\) \\(1 \\leq a[i] \\leq 10^6 \\; \\forall \\; i\\) Output: the array shifted \\(d\\) elements to the left. For example, for the following array, shifting to the left by 1 element gives: [1, 2, 3, 4] \\(\\to\\) [2, 3, 4, 1] By 3 elements: [1, 2, 3, 4] \\(\\to\\) [2, 3, 4, 1] \\(\\to\\) [3, 4, 1, 2] \\(\\to\\) [4, 1, 2, 3] Shifting by 4 elements brings the array back to its original order. The array could be modified in place, but for this problem it is okay to use an extra array to store the values in their new positions without overriding the values in the original array. For the value at position \\(i\\) , you can calculate its new position \\(i'\\) with \\(d\\) : \\(i' \\gets (i - d)\\) mod \\(n\\) Note that using the modulus operator with negative numbers may not always work the way you expect. You might need to add \\(n\\) : \\(i' \\gets (i - d + n)\\) mod \\(n\\) The new array should have the elements from \\(d\\) to the end, followed by the elements from 0 to \\(d - 1\\) . The description suggests that you should modify the array passed to the function, but it also works to create and return a new array with the correct values. Java 8: public static List<Integer> rotLeft(List<Integer> a, int d) { Iterator<Integer> iter = a.iterator(); List<Integer> start = new LinkedList<>(); for (int i = 0; i < d; i++) { start.add(iter.next()); } List<Integer> newList = new LinkedList<>(); while (iter.hasNext()) { newList.add(iter.next()); } a.clear(); a.addAll(newList); a.addAll(start); return a; } C++: vector<int> rotLeft(vector<int> a, int d) { const int n = a.size(); vector<int> newVector(n, 0); for (int i = 0; i < n; i++) { newVector[(i - d + n) % n] = a[i]; } a = newVector; return a; } Python 3: def rotLeft(a, d): new_list = a[d:] + a[:d] a.clear() a.extend(new_list) return a Back","title":"Arrays: Left Rotation"},{"location":"interviewprep/arrays/leftrotation/#arrays-left-rotation","text":"Problem Category: Arrays Difficulty: Easy Given an array, rotate it to the left by \\(d\\) elements. Input: an array \\(a[n]\\) and a number of rotations to make, \\(d\\) . \\(1 \\leq d \\leq n \\leq 10^5\\) \\(1 \\leq a[i] \\leq 10^6 \\; \\forall \\; i\\) Output: the array shifted \\(d\\) elements to the left. For example, for the following array, shifting to the left by 1 element gives: [1, 2, 3, 4] \\(\\to\\) [2, 3, 4, 1] By 3 elements: [1, 2, 3, 4] \\(\\to\\) [2, 3, 4, 1] \\(\\to\\) [3, 4, 1, 2] \\(\\to\\) [4, 1, 2, 3] Shifting by 4 elements brings the array back to its original order. The array could be modified in place, but for this problem it is okay to use an extra array to store the values in their new positions without overriding the values in the original array. For the value at position \\(i\\) , you can calculate its new position \\(i'\\) with \\(d\\) : \\(i' \\gets (i - d)\\) mod \\(n\\) Note that using the modulus operator with negative numbers may not always work the way you expect. You might need to add \\(n\\) : \\(i' \\gets (i - d + n)\\) mod \\(n\\) The new array should have the elements from \\(d\\) to the end, followed by the elements from 0 to \\(d - 1\\) . The description suggests that you should modify the array passed to the function, but it also works to create and return a new array with the correct values. Java 8: public static List<Integer> rotLeft(List<Integer> a, int d) { Iterator<Integer> iter = a.iterator(); List<Integer> start = new LinkedList<>(); for (int i = 0; i < d; i++) { start.add(iter.next()); } List<Integer> newList = new LinkedList<>(); while (iter.hasNext()) { newList.add(iter.next()); } a.clear(); a.addAll(newList); a.addAll(start); return a; } C++: vector<int> rotLeft(vector<int> a, int d) { const int n = a.size(); vector<int> newVector(n, 0); for (int i = 0; i < n; i++) { newVector[(i - d + n) % n] = a[i]; } a = newVector; return a; } Python 3: def rotLeft(a, d): new_list = a[d:] + a[:d] a.clear() a.extend(new_list) return a Back","title":"Arrays: Left Rotation"},{"location":"interviewprep/dicts/ransomnote/","text":"Hash Tables: Ransom Note Problem Category: Dictionaries and Hashmaps Difficulty: Easy Given a list of words in a magazine, determine whether it is possible to cut out enough words to write a given ransom note. Input: arrays \\(magazine[m]\\) and \\(note[n]\\) of strings, each of which is a word made of uppercase and lowercase English letters. \\(1 \\leq m, n \\leq 3 \\times 10^5\\) Output: print Yes if it is possible to arrange the words of \\(magazine\\) to write the \\(note\\) , otherwise print No . For example, if the \\(note\\) is [\"two\", \"plus\", \"two\", \"is\", \"four\"] , then if the \\(magazine\\) contains two \"two\" s, a \"plus\" , an \"is\" , and a \"four\" , then the output is Yes . If it is missing any of those, or it only has one \"two\" , or there is a \"Plus\" instead of a \"plus\" , then the answer is No . Note that the words are case-sensitive. It is not enough to know that every word in \\(note\\) is also in \\(magazine\\) ; there must be as many instances of any word in \\(magazine\\) as there are in \\(note\\) . You can use maps to count the number of occurences in each word of \\(magazine\\) and \\(note\\) . The answer is No if there is a word in your \\(note\\) map that either doesn't occur in \\(magazine\\) or occurs fewer times in \\(magazine\\) than in \\(note\\) . Java 8: public static void checkMagazine(List<String> magazine, List<String> note) { Map<String, Integer> magazineFreq = new HashMap<>(); Map<String, Integer> noteFreq = new HashMap<>(); for (String word : magazine) { magazineFreq.put(word, magazineFreq.getOrDefault(word, 0) + 1); } for (String word : note) { noteFreq.put(word, noteFreq.getOrDefault(word, 0) + 1); } for (String word : noteFreq.keySet()) { if (noteFreq.get(word) > magazineFreq.getOrDefault(word, 0)) { System.out.println(\"No\"); return; } } System.out.println(\"Yes\"); } C++: void checkMagazine(vector<string> magazine, vector<string> note) { map<string, int> magazineFreq; map<string, int> noteFreq; for (auto word = magazine.begin(); word != magazine.end(); word++) { magazineFreq[*word]++; } for (auto word = note.begin(); word != note.end(); word++) { noteFreq[*word]++; } for (auto entry = noteFreq.begin(); entry != noteFreq.end(); entry++) { if (entry->second > magazineFreq[entry->first]) { cout << \"No\" << endl; return; } } cout << \"Yes\" << endl; } Python 3: def checkMagazine(magazine, note): magazine_freq = {word: 0 for word in magazine} note_freq = {word: 0 for word in note} for word in magazine: magazine_freq[word] += 1 for word in note: note_freq[word] += 1 for word, freq in note_freq.items(): if word not in magazine_freq or magazine_freq[word] < freq: print(\"No\") return print(\"Yes\") Back","title":"Hash Tables: Ransom Note"},{"location":"interviewprep/dicts/ransomnote/#hash-tables-ransom-note","text":"Problem Category: Dictionaries and Hashmaps Difficulty: Easy Given a list of words in a magazine, determine whether it is possible to cut out enough words to write a given ransom note. Input: arrays \\(magazine[m]\\) and \\(note[n]\\) of strings, each of which is a word made of uppercase and lowercase English letters. \\(1 \\leq m, n \\leq 3 \\times 10^5\\) Output: print Yes if it is possible to arrange the words of \\(magazine\\) to write the \\(note\\) , otherwise print No . For example, if the \\(note\\) is [\"two\", \"plus\", \"two\", \"is\", \"four\"] , then if the \\(magazine\\) contains two \"two\" s, a \"plus\" , an \"is\" , and a \"four\" , then the output is Yes . If it is missing any of those, or it only has one \"two\" , or there is a \"Plus\" instead of a \"plus\" , then the answer is No . Note that the words are case-sensitive. It is not enough to know that every word in \\(note\\) is also in \\(magazine\\) ; there must be as many instances of any word in \\(magazine\\) as there are in \\(note\\) . You can use maps to count the number of occurences in each word of \\(magazine\\) and \\(note\\) . The answer is No if there is a word in your \\(note\\) map that either doesn't occur in \\(magazine\\) or occurs fewer times in \\(magazine\\) than in \\(note\\) . Java 8: public static void checkMagazine(List<String> magazine, List<String> note) { Map<String, Integer> magazineFreq = new HashMap<>(); Map<String, Integer> noteFreq = new HashMap<>(); for (String word : magazine) { magazineFreq.put(word, magazineFreq.getOrDefault(word, 0) + 1); } for (String word : note) { noteFreq.put(word, noteFreq.getOrDefault(word, 0) + 1); } for (String word : noteFreq.keySet()) { if (noteFreq.get(word) > magazineFreq.getOrDefault(word, 0)) { System.out.println(\"No\"); return; } } System.out.println(\"Yes\"); } C++: void checkMagazine(vector<string> magazine, vector<string> note) { map<string, int> magazineFreq; map<string, int> noteFreq; for (auto word = magazine.begin(); word != magazine.end(); word++) { magazineFreq[*word]++; } for (auto word = note.begin(); word != note.end(); word++) { noteFreq[*word]++; } for (auto entry = noteFreq.begin(); entry != noteFreq.end(); entry++) { if (entry->second > magazineFreq[entry->first]) { cout << \"No\" << endl; return; } } cout << \"Yes\" << endl; } Python 3: def checkMagazine(magazine, note): magazine_freq = {word: 0 for word in magazine} note_freq = {word: 0 for word in note} for word in magazine: magazine_freq[word] += 1 for word in note: note_freq[word] += 1 for word, freq in note_freq.items(): if word not in magazine_freq or magazine_freq[word] < freq: print(\"No\") return print(\"Yes\") Back","title":"Hash Tables: Ransom Note"},{"location":"interviewprep/dicts/twostrings/","text":"Two Strings Problem Category: Dictionaries and Hashmaps Difficulty: Easy Given two strings, determine if they share any common substring. Input: two strings \\(s_1\\) and \\(s_2\\) of lowercase English letters. \\(1 \\leq |s_1|, |s_2| \\leq 10^5\\) Output: the string \"Yes\" if there exists a non-empty string that is a substring of both \\(s_1\\) and \\(s_2\\) , otherwise the string \"No\". If \\(s_1\\) and \\(s_2\\) have a common non-empty substring, then they share at least one letter in common. If \\(s_1\\) and \\(s_2\\) share a letter \\(c\\) in common, then they share the common substring \" \\(c\\) \" and the answer is Yes. Therefore, the answer is Yes if and only if \\(s_1\\) and \\(s_2\\) have at least one letter in common. We need to find one letter that is in both \\(s_1\\) and \\(s_2\\) to determine the answer is Yes, and if the strings have no letters in common, the answer is No. This is the condition we are trying to check: \\(\\{c : c \\in s_1\\} \\cap \\{c : c \\in s_2\\} \\neq \\emptyset\\) There are a few ways to do this. You can make separate sets with the characters of \\(s_1\\) and \\(s_2\\) and calculate the intersection. You can make a set for \\(s_1\\) and then check whether it contains any character of \\(s_2\\) . You can also make a combined set for \\(s_1\\) and \\(s_2\\) and check for independence: \\(|\\{c : c \\in s_1\\} \\cup \\{c : c \\in s_2\\}| = |\\{c : c \\in s_1\\}| + |\\{c : c \\in s_2\\}|\\) If the sets are independent, then the answer is No. Java 8: public static String twoStrings(String s1, String s2) { Set<Character> s1set = new HashSet<>(); for (int i = 0; i < s1.length(); i++) { s1set.add(s1.charAt(i)); } for (int i = 0; i < s2.length(); i++) { if (s1set.contains(s2.charAt(i))) { return \"YES\"; } } return \"NO\"; } C++: string twoStrings(string s1, string s2) { set<char> s1set; for (auto ch = s1.begin(); ch != s1.end(); ch++) { s1set.insert(*ch); } for (auto ch = s2.begin(); ch != s2.end(); ch++) { if (s1set.find(*ch) != s1set.end()) { return \"YES\"; } } return \"NO\"; } Python 3: def twoStrings(s1, s2): return \"YES\" if set(s1) & set(s2) else \"NO\" Back","title":"Two Strings"},{"location":"interviewprep/dicts/twostrings/#two-strings","text":"Problem Category: Dictionaries and Hashmaps Difficulty: Easy Given two strings, determine if they share any common substring. Input: two strings \\(s_1\\) and \\(s_2\\) of lowercase English letters. \\(1 \\leq |s_1|, |s_2| \\leq 10^5\\) Output: the string \"Yes\" if there exists a non-empty string that is a substring of both \\(s_1\\) and \\(s_2\\) , otherwise the string \"No\". If \\(s_1\\) and \\(s_2\\) have a common non-empty substring, then they share at least one letter in common. If \\(s_1\\) and \\(s_2\\) share a letter \\(c\\) in common, then they share the common substring \" \\(c\\) \" and the answer is Yes. Therefore, the answer is Yes if and only if \\(s_1\\) and \\(s_2\\) have at least one letter in common. We need to find one letter that is in both \\(s_1\\) and \\(s_2\\) to determine the answer is Yes, and if the strings have no letters in common, the answer is No. This is the condition we are trying to check: \\(\\{c : c \\in s_1\\} \\cap \\{c : c \\in s_2\\} \\neq \\emptyset\\) There are a few ways to do this. You can make separate sets with the characters of \\(s_1\\) and \\(s_2\\) and calculate the intersection. You can make a set for \\(s_1\\) and then check whether it contains any character of \\(s_2\\) . You can also make a combined set for \\(s_1\\) and \\(s_2\\) and check for independence: \\(|\\{c : c \\in s_1\\} \\cup \\{c : c \\in s_2\\}| = |\\{c : c \\in s_1\\}| + |\\{c : c \\in s_2\\}|\\) If the sets are independent, then the answer is No. Java 8: public static String twoStrings(String s1, String s2) { Set<Character> s1set = new HashSet<>(); for (int i = 0; i < s1.length(); i++) { s1set.add(s1.charAt(i)); } for (int i = 0; i < s2.length(); i++) { if (s1set.contains(s2.charAt(i))) { return \"YES\"; } } return \"NO\"; } C++: string twoStrings(string s1, string s2) { set<char> s1set; for (auto ch = s1.begin(); ch != s1.end(); ch++) { s1set.insert(*ch); } for (auto ch = s2.begin(); ch != s2.end(); ch++) { if (s1set.find(*ch) != s1set.end()) { return \"YES\"; } } return \"NO\"; } Python 3: def twoStrings(s1, s2): return \"YES\" if set(s1) & set(s2) else \"NO\" Back","title":"Two Strings"},{"location":"interviewprep/warmup/countingvalleys/","text":"Counting Valleys Problem Category: Warm-up Challenges Difficulty: Easy Given a path of steps, which are either up or down, starting at sea level, determine the number of valleys crossed. A valley is a sequence of steps that starts at sea level, descends below sea level, and then returns to sea level. Input: a number of steps \\(s\\) and a path \\(p \\in \\{U, D\\}^s\\) , where \\(U\\) represents a step up and \\(D\\) represents a step down. The path begins and ends at sea level, so \\(p\\) has an equal number of \\(U\\) 's and \\(D\\) 's. \\(2 \\leq s \\leq 10^6\\) \\(|\\{i : p_i = U\\}| = |\\{i : p_i = D\\}| = \\frac{s}{2}\\) Output: the number of valleys (sequences that start at sea level, descend below sea level, and then return up to sea level). Read through the path and keep track of what elevation each step reaches. For example: \"UDDDUDUU\" \\(\\to\\) 0, 1, 0, -1, -2, -1, -2, -1, 0 We can see that a valley ends whenever we step up from elevation -1 to 0. The path is guaranteed to return to sea level (elevation 0) by the end, so every valley ends, and the number of times we step up from -1 to 0 is the number of valleys. Java 8: public static int countingValleys(int steps, String path) { int count = 0; int level = 0; for (int i = 0; i < steps; i++) { if (path.charAt(i) == 'U') { level++; if (level == 0) { count++; } } else { level--; } } return count; } C++: int countingValleys(int steps, string path) { int count = 0; int level = 0; for (int i = 0; i < steps; i++) { if (path[i] == 'U') { level++; count += level == 0; } else { level--; } } return count; } Python 3: def countingValleys(steps, path): level = 0 count = 0 for step in path: if step == \"U\": level += 1 if level == 0: count += 1 else: level -= 1 return count Back","title":"Counting Valleys"},{"location":"interviewprep/warmup/countingvalleys/#counting-valleys","text":"Problem Category: Warm-up Challenges Difficulty: Easy Given a path of steps, which are either up or down, starting at sea level, determine the number of valleys crossed. A valley is a sequence of steps that starts at sea level, descends below sea level, and then returns to sea level. Input: a number of steps \\(s\\) and a path \\(p \\in \\{U, D\\}^s\\) , where \\(U\\) represents a step up and \\(D\\) represents a step down. The path begins and ends at sea level, so \\(p\\) has an equal number of \\(U\\) 's and \\(D\\) 's. \\(2 \\leq s \\leq 10^6\\) \\(|\\{i : p_i = U\\}| = |\\{i : p_i = D\\}| = \\frac{s}{2}\\) Output: the number of valleys (sequences that start at sea level, descend below sea level, and then return up to sea level). Read through the path and keep track of what elevation each step reaches. For example: \"UDDDUDUU\" \\(\\to\\) 0, 1, 0, -1, -2, -1, -2, -1, 0 We can see that a valley ends whenever we step up from elevation -1 to 0. The path is guaranteed to return to sea level (elevation 0) by the end, so every valley ends, and the number of times we step up from -1 to 0 is the number of valleys. Java 8: public static int countingValleys(int steps, String path) { int count = 0; int level = 0; for (int i = 0; i < steps; i++) { if (path.charAt(i) == 'U') { level++; if (level == 0) { count++; } } else { level--; } } return count; } C++: int countingValleys(int steps, string path) { int count = 0; int level = 0; for (int i = 0; i < steps; i++) { if (path[i] == 'U') { level++; count += level == 0; } else { level--; } } return count; } Python 3: def countingValleys(steps, path): level = 0 count = 0 for step in path: if step == \"U\": level += 1 if level == 0: count += 1 else: level -= 1 return count Back","title":"Counting Valleys"},{"location":"interviewprep/warmup/jumpingontheclouds/","text":"Jumping on the Clouds Problem Category: Warm-Up Challenges Difficulty: Easy Given a pattern of safe and dangerous clouds leading to a goal, determine the minimum number of jumps required to reach the end safely. Input: a number of clouds \\(n\\) and a pattern \\(c_1, \\ldots c_n\\) where \\(c_1 = 0\\) , \\(c_n = 0\\) , and \\(c_i \\in \\{0, 1\\}\\) for \\(1 < i < n\\) . \\(c_i = 0\\) means cloud \\(i\\) is safe, and \\(c_i = 1\\) means cloud \\(i\\) must be avoided. \\(2 \\leq n \\leq 100\\) Output: the minimum number of jumps needed to win the game. The player starts on cloud 1 and must reach cloud \\(n\\) . They can jump forward 1 or 2 clouds at a time. It is guaranteed that the player can win, so there will never be two dangerous clouds in a row. We can be greedy by taking advantage of the fact that there is always a path to the end. If the player is at cloud \\(i\\) (starting at cloud 0), look at cloud \\(i + 2\\) : If cloud \\(i + 2\\) is safe, you should always jump 2 spaces forward to that cloud. If cloud \\(i + 2\\) is dangerous, you can (and should) jump 1 space forward to cloud \\(i + 1\\) instead. The first cloud is safe, and there are no two consecutive dangerous clouds. Therefore, for any safe cloud at \\(i\\) , if you can't jump to \\(i + 2\\) , you can jump to \\(i + 1\\) and then to \\(i + 3\\) and so on. For the Java solution, c is given as a List instead of an array, so my solution converts it into an array first. You only need to read through the list once sequentially to solve the problem, so it is possible to use an iterator over the list instead of converting it into an array and indexing into it. Java 8: public static int jumpingOnClouds(List<Integer> c) { final int N = c.size(); Integer[] clouds = c.toArray(new Integer[N]); int jumps = 0; int position = 0; while (position + 1 < N) { if (position + 2 < N && clouds[position + 2] == 0) { position += 2; } else { position++; } jumps++; } return jumps; } C++: int jumpingOnClouds(vector<int> c) { const int n = c.size(); int jumps = 0; int position = 0; while (position + 1 < n) { position += 1 + (position + 2 < n && !c[position + 2]); jumps++; } return jumps; } Python 3: def jumpingOnClouds(c): n = len(c) position = 0 jumps = 0 while position + 1 < n: if position + 2 < n and c[position + 2] == 0: position += 2 else: position += 1 jumps += 1 return jumps Back","title":"Jumping on the Clouds"},{"location":"interviewprep/warmup/jumpingontheclouds/#jumping-on-the-clouds","text":"Problem Category: Warm-Up Challenges Difficulty: Easy Given a pattern of safe and dangerous clouds leading to a goal, determine the minimum number of jumps required to reach the end safely. Input: a number of clouds \\(n\\) and a pattern \\(c_1, \\ldots c_n\\) where \\(c_1 = 0\\) , \\(c_n = 0\\) , and \\(c_i \\in \\{0, 1\\}\\) for \\(1 < i < n\\) . \\(c_i = 0\\) means cloud \\(i\\) is safe, and \\(c_i = 1\\) means cloud \\(i\\) must be avoided. \\(2 \\leq n \\leq 100\\) Output: the minimum number of jumps needed to win the game. The player starts on cloud 1 and must reach cloud \\(n\\) . They can jump forward 1 or 2 clouds at a time. It is guaranteed that the player can win, so there will never be two dangerous clouds in a row. We can be greedy by taking advantage of the fact that there is always a path to the end. If the player is at cloud \\(i\\) (starting at cloud 0), look at cloud \\(i + 2\\) : If cloud \\(i + 2\\) is safe, you should always jump 2 spaces forward to that cloud. If cloud \\(i + 2\\) is dangerous, you can (and should) jump 1 space forward to cloud \\(i + 1\\) instead. The first cloud is safe, and there are no two consecutive dangerous clouds. Therefore, for any safe cloud at \\(i\\) , if you can't jump to \\(i + 2\\) , you can jump to \\(i + 1\\) and then to \\(i + 3\\) and so on. For the Java solution, c is given as a List instead of an array, so my solution converts it into an array first. You only need to read through the list once sequentially to solve the problem, so it is possible to use an iterator over the list instead of converting it into an array and indexing into it. Java 8: public static int jumpingOnClouds(List<Integer> c) { final int N = c.size(); Integer[] clouds = c.toArray(new Integer[N]); int jumps = 0; int position = 0; while (position + 1 < N) { if (position + 2 < N && clouds[position + 2] == 0) { position += 2; } else { position++; } jumps++; } return jumps; } C++: int jumpingOnClouds(vector<int> c) { const int n = c.size(); int jumps = 0; int position = 0; while (position + 1 < n) { position += 1 + (position + 2 < n && !c[position + 2]); jumps++; } return jumps; } Python 3: def jumpingOnClouds(c): n = len(c) position = 0 jumps = 0 while position + 1 < n: if position + 2 < n and c[position + 2] == 0: position += 2 else: position += 1 jumps += 1 return jumps Back","title":"Jumping on the Clouds"},{"location":"interviewprep/warmup/repeatedstring/","text":"Repeated String Problem Category: Warm-up Challenges Difficulty: Easy Find the number of a's in the first \\(n\\) letters of an infinitely repeating string. Input: a string \\(s\\) of lowercase English letters, and \\(n\\) , the length of the substring to consider when \\(s\\) is repeated infinitely. \\(1 \\leq |s| \\leq 100, 1 \\leq n \\leq 10^{12}\\) Output: the number of a's in the first \\(n\\) characters of the infinitely repeating string generated by \\(s\\) . \\(n\\) can be a very large number, so you cannot store the entire \\(n\\) -length substring to count the number of a's. However, we know the substring will contain \\(\\lfloor \\frac{n}{|s|} \\rfloor\\) complete instances of \\(s\\) , and then the remainder will be the first \\(k = n\\) mod \\(|s|\\) characters of \\(s\\) . Count the number of a's in the first \\(k\\) characters of \\(s\\) , as well as the number of a's in all of \\(s\\) , and you can calculate the number of a's in the \\(n\\) characters generated by repeating \\(s\\) . Java 8: public static long repeatedString(String s, long n) { long fullCount = n / s.length(); int partial = (int) (n % s.length()); int count = 0; int partialCount = 0; for (int i = 0; i < s.length(); i++) { if (s.charAt(i) == 'a') { if (i < partial) { partialCount++; } count++; } } return fullCount * count + partialCount; } C++: long repeatedString(string s, long n) { const long fullCount = n / s.size(); const int part = n % s.size(); int count = 0; int partialCount = 0; for (int i = 0; i < s.size(); i++) { if (s[i] == 'a') { if (i < part) { partialCount++; } count++; } i++; } return fullCount * count + partialCount; } Python 3: def repeatedString(s, n): full_count = n // len(s) partial = s[:(n % len(s))] return full_count * s.count('a') + partial.count('a') Back","title":"Repeated String"},{"location":"interviewprep/warmup/repeatedstring/#repeated-string","text":"Problem Category: Warm-up Challenges Difficulty: Easy Find the number of a's in the first \\(n\\) letters of an infinitely repeating string. Input: a string \\(s\\) of lowercase English letters, and \\(n\\) , the length of the substring to consider when \\(s\\) is repeated infinitely. \\(1 \\leq |s| \\leq 100, 1 \\leq n \\leq 10^{12}\\) Output: the number of a's in the first \\(n\\) characters of the infinitely repeating string generated by \\(s\\) . \\(n\\) can be a very large number, so you cannot store the entire \\(n\\) -length substring to count the number of a's. However, we know the substring will contain \\(\\lfloor \\frac{n}{|s|} \\rfloor\\) complete instances of \\(s\\) , and then the remainder will be the first \\(k = n\\) mod \\(|s|\\) characters of \\(s\\) . Count the number of a's in the first \\(k\\) characters of \\(s\\) , as well as the number of a's in all of \\(s\\) , and you can calculate the number of a's in the \\(n\\) characters generated by repeating \\(s\\) . Java 8: public static long repeatedString(String s, long n) { long fullCount = n / s.length(); int partial = (int) (n % s.length()); int count = 0; int partialCount = 0; for (int i = 0; i < s.length(); i++) { if (s.charAt(i) == 'a') { if (i < partial) { partialCount++; } count++; } } return fullCount * count + partialCount; } C++: long repeatedString(string s, long n) { const long fullCount = n / s.size(); const int part = n % s.size(); int count = 0; int partialCount = 0; for (int i = 0; i < s.size(); i++) { if (s[i] == 'a') { if (i < part) { partialCount++; } count++; } i++; } return fullCount * count + partialCount; } Python 3: def repeatedString(s, n): full_count = n // len(s) partial = s[:(n % len(s))] return full_count * s.count('a') + partial.count('a') Back","title":"Repeated String"},{"location":"interviewprep/warmup/salesbymatch/","text":"Sales by Match Problem Category: Warm-up Challenges Difficulty: Easy Given a list of socks, determine how many pairs of matching-color socks can be made. Input: a list of socks \\(ar[n]\\) , where \\(ar[i]\\) is an integer representing the color of sock \\(i\\) . \\(1 \\leq n \\leq 100, 1 \\leq ar[i] \\leq 100 \\; \\forall \\; i\\) Output: the maximum number of pairs that can be achieved by pairing socks that have the same color We don't need the number of total possible ways to pair the socks; we just need to maximum number of pairs achievable by any pairing where no sock is matched to a sock of a different color. For example, [1, 1, 1, 1, 1] has at most 2 matches: one way to achieve this is by matching sock 0 to sock 1 and sock 2 to sock 3, leaving sock 4 unpaired. Make a set to store available sock colors and loop through the list of socks. Check if each sock's color is in the set so far: If sock \\(i\\) 's color is not in the set, then you have no sock to pair with \\(i\\) . \\(i\\) is a loose sock available for a future pairing. If sock \\(i\\) 's color is in the set, then there is a previous sock available to pair with \\(i\\) . Remove \\(i\\) 's color from the set and record that a pair has been made. Another solution could be to count how many socks there are of each color. If a color appears on \\(k\\) socks, then \\(\\lfloor \\frac{k}{2} \\rfloor\\) is the number of pairs that can be made with that color. Java 8: public static int sockMerchant(int n, List<Integer> ar) { int count = 0; Set<Integer> colors = new HashSet<>(); for (int sock : ar) { if (colors.remove(sock)) { count++; } else { colors.add(sock); } } return count; } C++: int sockMerchant(int n, vector<int> ar) { int count = 0; set<int> colors; for (int i = 0; i < n; i++) { if(colors.erase(ar[i])) { count++; } else { colors.insert(ar[i]); } } return count; } Python 3: def sockMerchant(n, ar): colors = set() count = 0 for i in ar: if i in colors: count += 1 colors.remove(i) else: colors.add(i) return count Python 3 Alternate Solution: def sockMerchant(n, ar): sock_freq = {sock: ar.count(sock) for sock in ar} return sum(v // 2 for _, v in sock_freq.items()) Back","title":"Sales by Match"},{"location":"interviewprep/warmup/salesbymatch/#sales-by-match","text":"Problem Category: Warm-up Challenges Difficulty: Easy Given a list of socks, determine how many pairs of matching-color socks can be made. Input: a list of socks \\(ar[n]\\) , where \\(ar[i]\\) is an integer representing the color of sock \\(i\\) . \\(1 \\leq n \\leq 100, 1 \\leq ar[i] \\leq 100 \\; \\forall \\; i\\) Output: the maximum number of pairs that can be achieved by pairing socks that have the same color We don't need the number of total possible ways to pair the socks; we just need to maximum number of pairs achievable by any pairing where no sock is matched to a sock of a different color. For example, [1, 1, 1, 1, 1] has at most 2 matches: one way to achieve this is by matching sock 0 to sock 1 and sock 2 to sock 3, leaving sock 4 unpaired. Make a set to store available sock colors and loop through the list of socks. Check if each sock's color is in the set so far: If sock \\(i\\) 's color is not in the set, then you have no sock to pair with \\(i\\) . \\(i\\) is a loose sock available for a future pairing. If sock \\(i\\) 's color is in the set, then there is a previous sock available to pair with \\(i\\) . Remove \\(i\\) 's color from the set and record that a pair has been made. Another solution could be to count how many socks there are of each color. If a color appears on \\(k\\) socks, then \\(\\lfloor \\frac{k}{2} \\rfloor\\) is the number of pairs that can be made with that color. Java 8: public static int sockMerchant(int n, List<Integer> ar) { int count = 0; Set<Integer> colors = new HashSet<>(); for (int sock : ar) { if (colors.remove(sock)) { count++; } else { colors.add(sock); } } return count; } C++: int sockMerchant(int n, vector<int> ar) { int count = 0; set<int> colors; for (int i = 0; i < n; i++) { if(colors.erase(ar[i])) { count++; } else { colors.insert(ar[i]); } } return count; } Python 3: def sockMerchant(n, ar): colors = set() count = 0 for i in ar: if i in colors: count += 1 colors.remove(i) else: colors.add(i) return count Python 3 Alternate Solution: def sockMerchant(n, ar): sock_freq = {sock: ar.count(sock) for sock in ar} return sum(v // 2 for _, v in sock_freq.items()) Back","title":"Sales by Match"}]}